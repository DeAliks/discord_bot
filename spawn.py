import os
import discord
import logging
import asyncio
import datetime
from discord.ext import commands, tasks
from oauth2client.service_account import ServiceAccountCredentials
import gspread
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø—ã –¥–ª—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
client = gspread.authorize(creds)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∞–≤–Ω–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Å—Å–∞
last_notification_time = {}
boss_cache = []
cache_last_update = datetime.datetime.now() - datetime.timedelta(minutes=15)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö
boss_spawn_times = {
    "Anggolt": 7 * 60,
    "Kiaron": 9 * 60,
    "Grish": 11 * 60,
    "Inferno": 13 * 60,
    "Liantte": 5 * 60 + 30,
    "Seyron": 6 * 60 + 30,
    "Gottmol": 7 * 60 + 30,
    "Gehenna": 8 * 60 + 30
}

intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.reactions = True
bot = commands.Bot(command_prefix='!', intents=intents)

async def get_boss_worksheet():
    retries = 3
    for i in range(retries):
        try:
            worksheet = client.open("NightCrowsApp").worksheet("Boss")
            return worksheet
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞ Boss: %s", e)
            if i < retries - 1:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                await asyncio.sleep(61)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ 61 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    return None

async def update_boss_cache():
    global cache_last_update, boss_cache
    now = datetime.datetime.now()

    if (now - cache_last_update).total_seconds() >= 15 * 60:
        logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –±–æ—Å—Å–æ–≤...")
        worksheet = await get_boss_worksheet()
        if worksheet is None:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç Boss.")
            return

        logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞...")
        try:
            all_rows = worksheet.get_all_values()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π
            boss_cache = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

            for row in all_rows:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã—Ö –ø—è—Ç–∏ —Å—Ç–æ–ª–±—Ü–∞—Ö
                if len(row) >= 5 and all(row[:5]):
                    try:
                        kill_time = datetime.datetime.strptime(row[1].strip(), "%d.%m.%Y %H:%M")  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                        boss_cache.append({
                            "name": row[0],
                            "kill_time": row[1],
                            "zone": row[2],
                            "difficulty": row[3],  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
                            "channel": row[4],  # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
                            "row_index": all_rows.index(row) + 2  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        })
                    except ValueError as ve:
                        logging.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: %s. –°—Ç—Ä–æ–∫–∞: %s", ve, row[1])
            logging.info(f"–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(boss_cache)} –±–æ—Å—Å(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: %s", e)
        finally:
            cache_last_update = now

@tasks.loop(minutes=1)
async def check_boss_spawn():
    await update_boss_cache()
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–æ–≤...")

    now = datetime.datetime.now()
    category = discord.utils.get(bot.guilds[0].categories, name='–ë–æ—Ç')  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    channel = discord.utils.get(category.text_channels, name='alert_arena')

    for boss in boss_cache:
        boss_name = boss["name"]
        kill_time_str = boss["kill_time"]
        zone = boss["zone"]
        difficulty = boss["difficulty"]
        alert_channel = boss["channel"]
        row_index = boss["row_index"]

        logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ—Å—Å–∞: {boss_name}")

        if not kill_time_str:
            logging.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Å—Å–∞ {boss_name}, —Ç–∞–∫ –∫–∞–∫ kill_time –ø—É—Å—Ç.")
            continue

        try:
            kill_time = datetime.datetime.strptime(kill_time_str, "%d.%m.%Y %H:%M")
        except ValueError as e:
            logging.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: %s. –°—Ç—Ä–æ–∫–∞: %s", e, kill_time_str)
            continue

        next_spawn_time = kill_time + datetime.timedelta(minutes=boss_spawn_times.get(boss_name, 0))
        time_to_spawn = (next_spawn_time - now).total_seconds() / 60
        time_to_spawn = round(time_to_spawn)

        logging.info(f"–ë–æ—Å—Å: {boss_name}, –≤—Ä–µ–º—è –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è: {time_to_spawn} –º–∏–Ω—É—Ç.")

        if time_to_spawn <= 0:
            logging.info(f"–ë–æ—Å—Å {boss_name} —É–∂–µ –ø–æ—è–≤–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
            continue

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π
        if 0 < time_to_spawn <= 5:
            if boss_name not in last_notification_time or now >= last_notification_time[boss_name]:
                if channel:
                    msg = await channel.send(f"@everyone –ë–æ—Å—Å \"{boss_name}\" –ø–æ—è–≤–∏—Ç—Å—è –≤ –∑–æ–Ω–µ —É—Ä–æ–≤–Ω—è \"{zone}\", "
                                             f"–≤ —Ä–µ–∂–∏–º–µ \"{difficulty}\" –Ω–∞ –∫–∞–Ω–∞–ª–µ \"{alert_channel}\" —á–µ—Ä–µ–∑ {time_to_spawn} –º–∏–Ω—É—Ç.")
                    await msg.add_reaction("üëç")  # –ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö
                    await msg.add_reaction("üëé")  # –ø–∞–ª–µ—Ü –≤–Ω–∏–∑

                    # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    def check(reaction, user):
                        return user != bot.user and str(reaction.emoji) in ["üëç", "üëé"] and reaction.message.id == msg.id
                    try:
                        reaction, user = await bot.wait_for('reaction_add', timeout=3000.0, check=check)
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                        appeared = "–î–∞" if str(reaction.emoji) == "üëç" else "–ù–µ—Ç"
                        reaction_time = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
                        await update_boss_status(boss, appeared, reaction_time)
                    except asyncio.TimeoutError:
                        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –≤–æ–≤—Ä–µ–º—è.")
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∞–≤–Ω–µ –±–æ—Å—Å–∞ {boss_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    last_notification_time[boss_name] = now + datetime.timedelta(minutes=5)

                    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    try:
                        logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –±–æ—Å—Å–∞ {boss_name} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
                        worksheet = await get_boss_worksheet()  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç
                        worksheet.delete_row(row_index)  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                        logging.info(f"–ó–∞–ø–∏—Å—å –¥–ª—è –±–æ—Å—Å–∞ {boss_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                    except Exception as e:
                        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –±–æ—Å—Å–∞ %s: %s", boss_name, e)

        if time_to_spawn > 5:
            logging.info(f"–ë–æ—Å—Å {boss_name} –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ, —á–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç. –í—Ä–µ–º—è –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è: {time_to_spawn} –º–∏–Ω—É—Ç.")

async def update_boss_status(boss, appeared, reaction_time):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Å—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    worksheet = await get_boss_worksheet()
    if worksheet is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç Boss.")
        return

    try:
        row_index = boss["row_index"]
        worksheet.update_cell(row_index, 6, appeared)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ü–æ—è–≤–∏–ª—Å—è" (6-–π —Å—Ç–æ–ª–±–µ—Ü)
        worksheet.update_cell(row_index, 7, reaction_time)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–¢–∞–π–º" (7-–π —Å—Ç–æ–ª–±–µ—Ü)
        logging.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Å—Å–∞ {boss['name']} –æ–±–Ω–æ–≤–ª–µ–Ω: {appeared}, –¢–∞–π–º: {reaction_time}")
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Å—Å–∞ %s: %s", boss["name"], e)

@bot.event
async def on_ready():
    logging.info(f'–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}')
    check_boss_spawn.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–æ–≤

@bot.command(name='s', aliases=['spawn', '—Å–ø–∞–≤–Ω', '—Å', 'c', '—ã'])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–¥–Ω—É
async def spawn_bosses(ctx):
    await update_boss_cache()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –±–æ—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if ctx.channel.id != 1278955149208846356:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è —Å–ø–∞–≤–Ω–æ–≤.")
        return

    now = datetime.datetime.now()
    response_message = []

    for boss in boss_cache:
        boss_name = boss["name"]
        kill_time_str = boss["kill_time"]
        zone = boss["zone"]
        difficulty = boss["difficulty"]
        alert_channel = boss["channel"]

        if not kill_time_str:
            logging.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Å—Å–∞ {boss_name}, —Ç–∞–∫ –∫–∞–∫ kill_time –ø—É—Å—Ç.")
            continue

        try:
            kill_time = datetime.datetime.strptime(kill_time_str, "%d.%m.%Y %H:%M")
        except ValueError as e:
            logging.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: %s. –°—Ç—Ä–æ–∫–∞: %s", e, kill_time_str)
            continue

        next_spawn_time = kill_time + datetime.timedelta(minutes=boss_spawn_times.get(boss_name, 0))
        time_to_spawn = (next_spawn_time - now).total_seconds() / 60

        if time_to_spawn > 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
            response_message.append(
                f"–ë–æ—Å—Å \"{boss_name}\" –ø–æ—è–≤–∏—Ç—Å—è –≤ –∑–æ–Ω–µ —É—Ä–æ–≤–Ω—è \"{zone}\", –≤ —Ä–µ–∂–∏–º–µ \"{difficulty}\" –Ω–∞ –∫–∞–Ω–∞–ª–µ \"{alert_channel}\" —á–µ—Ä–µ–∑ {round(time_to_spawn)} –º–∏–Ω—É—Ç."
            )

    if response_message:
        await ctx.send("\n".join(response_message))
    else:
        await ctx.send("–ù–µ—Ç –±–æ—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ –±–æ–ª–µ–µ —á–µ–º 5 –º–∏–Ω—É—Ç.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    TOKEN = os.getenv('DISCORD_TOKEN')
    if TOKEN is None:
        logging.error("–¢–æ–∫–µ–Ω Discord –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª .env.")
    else:
        bot.run(TOKEN)